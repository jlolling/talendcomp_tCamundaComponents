<%@ jet 
	imports="
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.process.IConnection
		org.talend.core.model.utils.NodeUtil
		org.talend.core.model.metadata.types.JavaTypesManager
		java.util.List
		java.util.Map
		java.util.ArrayList
	"
%>
<%
	 CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode) codeGenArgument.getArgument();
    String cid = node.getUniqueName();
	 boolean debug = "true".equals(ElementParameterParser.getValue(node, "__DEBUG__"));
    boolean useAlternateEndpoint = "true".equals(ElementParameterParser.getValue(node, "__USE_ALTERNATE_ENDPOINT__"));
    String alternateEndpoint = ElementParameterParser.getValue(node, "__ALTERNATE_ENDPOINT__");
    if (alternateEndpoint == null || alternateEndpoint.trim().isEmpty()) {
    	  alternateEndpoint = "null";
    }
    String server = ElementParameterParser.getValue(node, "__CAMUNDA_SERVICE__");
    String engine = ElementParameterParser.getValue(node, "__CAMUNDA_ENGINE__");
    boolean needAuthentication = "true".equals(ElementParameterParser.getValue(node, "__NEED_AUTHENTICATION__"));
    String user = ElementParameterParser.getValue(node, "__CAMUNDA_USER__");
    if (user == null || user.trim().isEmpty()) {
        user = "null";
    }
    String password = ElementParameterParser.getValue(node, "__CAMUNDA_PASSWORD__");
    if (password == null || password.trim().isEmpty()) {
        password = "null";
    }	
    String processDefinitionKey = ElementParameterParser.getValue(node, "__PROCESS_DEFINITION_KEY__");
    String businessKey = ElementParameterParser.getValue(node, "__BUSINESS_KEY__");
    boolean variablesInReturn = "true".equals(ElementParameterParser.getValue(node, "__VARIABLES_IN_RETURN__"));
    String maxRetries = ElementParameterParser.getValue(node, "__MAX_RETRIES_AFTER_ERROR__");
    String waitTimeAfterError = ElementParameterParser.getValue(node, "__WAIT_TIME_AFTER_ERROR__");
    String timeout = ElementParameterParser.getValue(node, "__TIMEOUT__");
 	 List<Map<String, String>> variables = (List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__VARIABLES__");
	 IConnection conn = null;
	 List<? extends IConnection> outConns = NodeUtil.getOutgoingConnections(node, IConnectionCategory.DATA);
	 if (outConns.size() > 0) {
		  conn = outConns.get(0);
	 }
	 List<IMetadataColumn> listColumns = new ArrayList<IMetadataColumn>(); // dummy
	 List<IMetadataTable> metadatas = node.getMetadataList();
	 if (metadatas != null && metadatas.size() > 0) {
    	  IMetadataTable metadata = metadatas.get(0);
    	  if (metadata != null) {
    		   listColumns = metadata.getListColumns();
		  }
	 }
%>
	de.jlo.talendcomp.camunda.process.ProcessInstance <%=cid%> = new de.jlo.talendcomp.camunda.process.ProcessInstance();
	globalMap.put("<%=cid%>", <%=cid%>);
	<%=cid%>.initLogger("<%=cid%>");
	<%=cid%>.setDebug(<%=debug%>);
<% if (useAlternateEndpoint) { %>
	<%=cid%>.setAlternateEndpoint(<%=alternateEndpoint%>);
<% } else { %>
	<%=cid%>.setCamundaServiceURL(<%=server%>);
	<%=cid%>.setCamundaEngine(<%=engine%>);
<% } %>
	<%=cid%>.setNeedAuthorization(<%=needAuthentication%>);
<%	if (needAuthentication) { %>
	<%=cid%>.setCamundaUser(<%=user%>);
	<%=cid%>.setCamundaPassword(<%=password%>);
<%	} %>
<%	if (maxRetries != null && maxRetries.trim().isEmpty() == false) { %>
	<%=cid%>.setMaxRetriesInCaseOfErrors(<%=maxRetries%>);
<%	} %>
<%	if (waitTimeAfterError != null && waitTimeAfterError.trim().isEmpty() == false) { %>
	<%=cid%>.setWaitMillisAfterError(<%=waitTimeAfterError%>);
<%	} %>
<%	if (timeout != null && timeout.trim().isEmpty() == false) { %>
	<%=cid%>.setTimeout(<%=timeout%>);
<%	} %>
	<%=cid%>.setProcessDefinitionKey(<%=processDefinitionKey%>);
<%	if (businessKey != null && businessKey.trim().isEmpty() == false) { %>
	<%=cid%>.setBusinessKey(<%=businessKey%>);
<%	} %>
<% if (listColumns.size() > 0) { %>
	<%=cid%>.setWithVariablesInReturn(<%=variablesInReturn%>);
<%	} %>
	try {
		// set process variables
<%	for (int i = 0; i < listColumns.size(); i++) {
		IMetadataColumn mc = listColumns.get(i);
		Map<String, String> variable = variables.get(i);
		boolean onlyInResponse = "true".equals(variable.get("ONLY_IN_RESPONSE"));
		if (onlyInResponse) {
			continue;
		}
		String fieldLabel = variable.get("ATTRIBUTE_ALIAS");
		if (fieldLabel == null || fieldLabel.trim().isEmpty()) {
			fieldLabel = "\"" + mc.getLabel()  + "\"";
		}
		String value = variable.get("ATTRIBUTE_VALUE");
		if (value != null && value.trim().isEmpty() == false) { %>
		<%=cid%>.addStartVariable(<%=fieldLabel%>, <%=value%>);
<%		} %>
<% } %>
		// start process instance
		<%=cid%>.start();
	} catch (Exception ex) {
		globalMap.put("<%=cid%>_ERROR_MESSAGE", ex.getMessage());
		throw ex;
	} finally {
		<%=cid%>.close();
	}
	// process response
	if (true) {
		try {
			globalMap.put("<%=cid%>_PROCESS_DEFINITION_KEY", <%=cid%>.getProcessDefinitionKey());
			globalMap.put("<%=cid%>_PROCESS_INSTANCE_ID", <%=cid%>.getProcessInstanceId());
			globalMap.put("<%=cid%>_PROCESS_INSTANCE_ENDED", <%=cid%>.getProcessInstanceEnded());
			globalMap.put("<%=cid%>_PROCESS_INSTANCE_SUSPENDED", <%=cid%>.getProcessInstanceSuspended());
			globalMap.put("<%=cid%>_BUSINESS_KEY", <%=cid%>.getBusinessKey());
<%	for (int i = 0; i < listColumns.size(); i++) {
		IMetadataColumn mc = listColumns.get(i);
		Map<String, String> config = variables.get(i);
		boolean onlyInResponse = "true".equals(config.get("ONLY_IN_RESPONSE"));
		String fieldLabel = config.get("ATTRIBUTE_ALIAS");
		if (fieldLabel == null || fieldLabel.trim().isEmpty()) {
			 fieldLabel = "\"" + mc.getLabel()  + "\"";
		}
		String pattern = mc.getPattern();
		if (pattern == null || pattern.trim().isEmpty()) {
			pattern = "null";
		}
		boolean isNullable = mc.isNullable();
		String javaClassName = mc.getTalendType().substring(3);
		String javaPackageClassName = JavaTypesManager.getTypeToGenerate(mc.getTalendType(), true);
		boolean isDateValue = javaClassName.contains("Date"); %>
			{
<%		if (isDateValue) { %>
				<%=javaPackageClassName%> var = <%=cid%>.getCurrentResponseVariableValueAsDate(<%=fieldLabel%>, <%=pattern%>, <%=isNullable%>);
<%		} else { %>
				<%=javaPackageClassName%> var = <%=cid%>.getCurrentResponseVariableValueAs<%=javaClassName%>(<%=fieldLabel%>, <%=mc.isNullable()%>);
<%		} %>
				globalMap.put("<%=cid%>.<%=mc.getLabel()%>", var);
<% 	if (conn != null) { %>
				<%=conn.getName()%>.<%=mc.getLabel()%> = var;
<%		} %>
			}
<%	} %> 
			Integer count_<%=cid%> = (Integer) globalMap.get("<%=cid%>_NB_LINE");
			if (count_<%=cid%> == null) {
				count_<%=cid%> = 0;
			}
			count_<%=cid%> = count_<%=cid%> + 1;
			globalMap.put("<%=cid%>_NB_LINE", count_<%=cid%>);
		} catch (Exception ex) {
			globalMap.put("<%=cid%>_ERROR_MESSAGE", ex.getMessage());
			throw ex;
		}